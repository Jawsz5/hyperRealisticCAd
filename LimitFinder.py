## modules needed
import numpy as np #numeric python
import matplotlib.pyplot as plt #graphing things with matlab
import scipy.integrate as sci #integrating things
import networkx as nx #creates the resevoir

import networkx as nx
from Rocket import Rocket

def calculate_dependency_strength_thrust_to_delta_v(rocket):
    # Interaction: Higher thrust leads to greater change in velocity (Delta-V) over time.
    # Quantification: Normalize the ratio of thrust to mass to a range between 0 and 1.
    thrust_to_mass_ratio = rocket.thrust / rocket.mass
    normalized_ratio = min(1, thrust_to_mass_ratio / 1000)  # Example normalization function
    return normalized_ratio

def calculate_dependency_strength_mass_to_delta_v(rocket):
    # Interaction: Greater mass results in lower change in velocity (Delta-V) for the same thrust.
    # Quantification: Normalize the mass to a range between 0 and 1.
    normalized_mass = rocket.mass / 10000  # Example normalization function
    return 1 - normalized_mass

def calculate_dependency_strength_nozzle_to_thrust(rocket):
    # Interaction: The design and efficiency of the nozzle affect the thrust generated by the engine.
    # Quantification: Derive a function based on nozzle characteristics that quantifies its impact on thrust.
    nozzle_effectiveness = rocket.nozzle * 100  # Example quantification function
    return nozzle_effectiveness / 100

def calculate_dependency_strength_frame_material_to_mass(rocket):
    # Interaction: The choice of frame material affects the overall mass of the rocket.
    # Quantification: Derive a function that relates the density and strength of the material to its contribution to mass.
    material_density = rocket.frame_material * 500  # Example quantification function
    return material_density / 1000

def calculate_dependency_strength_fuel_to_mass(rocket):
    # Interaction: The amount of fuel onboard contributes to the total mass of the rocket.
    # Quantification: Normalize the fuel mass to a range between 0 and 1.
    normalized_fuel = rocket.fuel
    return normalized_fuel

def calculate_dependency_strength_fins_to_aerodynamics(rocket):
    # Interaction: The presence and design of fins affect the aerodynamic properties of the rocket.
    # Quantification: Derive a function based on fin geometry and placement that quantifies their impact on aerodynamics.
    fin_effectiveness = rocket.fins * 100  # Example quantification function
    return fin_effectiveness / 100

def calculate_dependency_strength_altitude_to_gravity(rocket):
    # Interaction: Gravity varies with altitude, affecting the acceleration of the rocket.
    # Quantification: Normalize the gravitational force at different altitudes to a range between 0 and 1.
    normalized_gravity = (rocket.altitude / 10000) ** 0.5  # Example quantification function
    return normalized_gravity

def calculate_dependency_strength_velocity_to_delta_v(rocket):
    # Interaction: The rocket's velocity affects its ability to change velocity (Delta-V) over time.
    # Quantification: Derive a function based on the rocket's velocity profile that quantifies its impact on Delta-V.
    velocity_impact = rocket.velocity / 100  # Example quantification function
    return velocity_impact

def calculate_dependency_strength_delta_v_to_orbit(rocket):
    # Interaction: The total change in velocity (Delta-V) determines whether the rocket can achieve orbit.
    # Quantification: Normalize the total Delta-V required for orbit to a range between 0 and 1.
    normalized_delta_v = rocket.delta_v / 5000  # Example quantification function
    return normalized_delta_v

def create_rocket_network():
    G = nx.DiGraph()
    components = ["Thrust", "Mass", "Nozzle", "Frame Material", "Fuel", "Fins", "Altitude", "Velocity", "Delta-V", "Orbit"]
    G.add_nodes_from(components)

    edges = [("Thrust", "Delta-V"), ("Mass", "Delta-V"), ("Nozzle", "Thrust"), ("Frame Material", "Mass"),
             ("Fuel", "Mass"), ("Fins", "Aerodynamics"), ("Altitude", "Gravity"), ("Velocity", "Delta-V"),
             ("Delta-V", "Orbit")]

    G.add_edges_from(edges)

    return G

def compute_dependency_strengths(rocket, G):
    dependency_strengths = {}
    dependency_strengths["Thrust to Delta-V"] = calculate_dependency_strength_thrust_to_delta_v(rocket)
    dependency_strengths["Mass to Delta-V"] = calculate_dependency_strength_mass_to_delta_v(rocket)
    dependency_strengths["Nozzle to Thrust"] = calculate_dependency_strength_nozzle_to_thrust(rocket)
    dependency_strengths["Frame Material to Mass"] = calculate_dependency_strength_frame_material_to_mass(rocket)
    dependency_strengths["Fuel to Mass"] = calculate_dependency_strength_fuel_to_mass(rocket)
    dependency_strengths["Fins to Aerodynamics"] = calculate_dependency_strength_fins_to_aerodynamics(rocket)
    dependency_strengths["Altitude to Gravity"] = calculate_dependency_strength_altitude_to_gravity(rocket)
    dependency_strengths["Velocity to Delta-V"] = calculate_dependency_strength_velocity_to_delta_v(rocket)
    dependency_strengths["Delta-V to Orbit"] = calculate_dependency_strength_delta_v_to_orbit(rocket)
    return dependency_strengths

# Example usage:
rocket = Rocket("Falcon 9", thrust=10000, mass=5000, nozzle=0.5, frame_material=0.6, fuel=0.4, fins=0.3)
rocket_network = create_rocket_network()
dependency_strengths = compute_dependency_strengths(rocket, rocket_network)
print("Dependency strengths:", dependency_strengths)